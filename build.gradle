buildscript {
	ext {
		springBootVersion = '1.5.6.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

jar {
	baseName = 'todolist'
	version = '0.0.1-SNAPSHOT'
}

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


sourceSets {
	main.java.srcDirs 'src/main/java'
	test.java.srcDirs 'src/test/java'
	test.groovy.srcDirs 'src/test/groovy'

	cucumber {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/cucumber/java')
		}
		resources.srcDir file('src/cucumber/resources')
	}
}

configurations {
	cucumberCompile.extendsFrom testCompile
	cucumberRuntime.extendsFrom testRuntime
}


def cucumberVersion = "1.2.5"

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web'
	)
	
	testCompile(
		'junit:junit:4.12',
		'org.springframework.boot:spring-boot-starter-test',
		'org.spockframework:spock-core:1.1-groovy-2.4-rc-3',
		'org.spockframework:spock-spring:+',
		'com.athaydes:spock-reports:1.3.1',
		
		'info.cukes:cucumber-java:1.2.5',  
		'info.cukes:cucumber-junit:1.2.5',
		'info.cukes:cucumber-spring:1.2.5',
		'info.cukes:cucumber-jvm:1.2.5'
	)

//	testCompile(
//		'junit:junit:4.12',
//		'org.codehaus.groovy:groovy-all:2.4.4',
//		'org.spockframework:spock-core:1.0-groovy-2.4'
//)

//	testCompile(
//
//	)
	runtime(
		'org.springframework:spring-context:4.2.5.RELEASE',
		'org.springframework:spring-test:4.2.5.RELEASE',
		'org.springframework:spring-tx:4.2.5.RELEASE'
	)
}

task cucumber(type: Test) {
	dependsOn assemble, compileTestJava
	doLast {
		javaexec {
			main = "cucumber.api.cli.Main"
			classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
			args = ['--plugin', 'pretty', '--glue', 'gradle.cucumber', 'specs']
		}
	}
}

// Ensure that Cucumber runs before the check task and that the check task fails the build if there are failing integration tests.
// Ensure that our unit tests are run before Cucumber. This guarantees that our unit tests are run even if Cucumberbfails.
//check.dependsOn cucumber
//cucumber.mustRunAfter test

// Ensure that the HTML reports of unit and Cucumber are created to different report
// build/reports/cucumber directory contains the HTML report that contains the test results for Cucumber.
tasks.withType(Test) {
	reports.html.destination = file("${reporting.baseDir}/${name}")
}
